import y from"pify";var g=()=>{try{let e=(globalThis.navigator?.userAgent).match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i)||[];if(e[1]==="Chrome")return parseInt(e[2])<100||globalThis.chrome.runtime?.getManifest()?.manifest_version===2}catch{return!1}return!1};var h=class{#s;#e;get primaryClient(){return this.#e}#t;get secondaryClient(){return this.#t}#r;get area(){return this.#r}get hasWebApi(){try{return typeof window<"u"&&!!window.localStorage}catch(e){return console.error(e),!1}}#a=new Map;#i;get copiedKeySet(){return this.#i}isCopied=e=>this.hasWebApi&&(this.allCopied||this.copiedKeySet.has(e));#n=!1;get allCopied(){return this.#n}getExtStorageApi=()=>globalThis.browser?.storage||globalThis.chrome?.storage;get hasExtensionApi(){try{return!!this.getExtStorageApi()}catch(e){return console.error(e),!1}}isWatchSupported=()=>this.hasExtensionApi;keyNamespace="";isValidKey=e=>e.startsWith(this.keyNamespace);getNamespacedKey=e=>`${this.keyNamespace}${e}`;getUnnamespacedKey=e=>e.slice(this.keyNamespace.length);constructor({area:e="sync",allCopied:t=!1,copiedKeyList:a=[]}={}){this.setCopiedKeySet(a),this.#r=e,this.#n=t;try{this.hasWebApi&&(t||a.length>0)&&(this.#t=window.localStorage)}catch{}try{this.hasExtensionApi&&(this.#s=this.getExtStorageApi(),g()?this.#e=y(this.#s[this.area],{exclude:["getBytesInUse"],errorFirst:!1}):this.#e=this.#s[this.area])}catch{}}setCopiedKeySet(e){this.#i=new Set(e)}rawGetAll=()=>this.#e?.get();getAll=async()=>{let e=await this.rawGetAll();return Object.entries(e).filter(([t])=>this.isValidKey(t)).reduce((t,[a,s])=>(t[this.getUnnamespacedKey(a)]=s,t),{})};copy=async e=>{let t=e===void 0;if(!t&&!this.copiedKeySet.has(e)||!this.allCopied||!this.hasExtensionApi)return!1;let a=this.allCopied?await this.rawGetAll():await this.#e.get((t?[...this.copiedKeySet]:[e]).map(this.getNamespacedKey));if(!a)return!1;let s=!1;for(let r in a){let n=a[r],c=this.#t?.getItem(r);this.#t?.setItem(r,n),s||=n!==c}return s};rawGet=async e=>this.hasExtensionApi?(await this.#e.get(e))[e]:this.isCopied(e)?this.#t?.getItem(e):null;rawSet=async(e,t)=>(this.isCopied(e)&&this.#t?.setItem(e,t),this.hasExtensionApi&&await this.#e.set({[e]:t}),null);clear=async(e=!1)=>{e&&this.#t?.clear(),await this.#e.clear()};rawRemove=async e=>{this.isCopied(e)&&this.#t?.removeItem(e),this.hasExtensionApi&&await this.#e.remove(e)};removeAll=async()=>{let e=await this.getAll(),t=Object.keys(e);await Promise.all(t.map(this.remove))};watch=e=>{let t=this.isWatchSupported();return t&&this.#o(e),t};#o=e=>{for(let t in e){let a=this.getNamespacedKey(t),s=this.#a.get(a)?.callbackSet||new Set;if(s.add(e[t]),s.size>1)continue;let r=(n,c)=>{if(c!==this.area||!n[a])return;let l=this.#a.get(a);if(!l)throw new Error(`Storage comms does not exist for nsKey: ${a}`);Promise.all([this.parseValue(n[a].newValue),this.parseValue(n[a].oldValue)]).then(([p,d])=>{for(let m of l.callbackSet)m({newValue:p,oldValue:d},c)})};this.#s.onChanged.addListener(r),this.#a.set(a,{callbackSet:s,listener:r})}};unwatch=e=>{let t=this.isWatchSupported();return t&&this.#c(e),t};#c(e){for(let t in e){let a=this.getNamespacedKey(t),s=e[t],r=this.#a.get(a);r&&(r.callbackSet.delete(s),r.callbackSet.size===0&&(this.#a.delete(a),this.#s.onChanged.removeListener(r.listener)))}}unwatchAll=()=>this.#h();#h(){this.#a.forEach(({listener:e})=>this.#s.onChanged.removeListener(e)),this.#a.clear()}async getItem(e){return this.get(e)}async setItem(e,t){await this.set(e,t)}async removeItem(e){return this.remove(e)}},o=class extends h{get=async e=>{let t=this.getNamespacedKey(e),a=await this.rawGet(t);return this.parseValue(a)};set=async(e,t)=>{let a=this.getNamespacedKey(e),s=JSON.stringify(t);return this.rawSet(a,s)};remove=async e=>{let t=this.getNamespacedKey(e);return this.rawRemove(t)};setNamespace=e=>{this.keyNamespace=e};parseValue=async e=>{try{if(e!==void 0)return JSON.parse(e)}catch(t){console.error(t)}}};var u=async({storage:i=new o,printer:e=console.table})=>{let t=await i.getAll();e(t)},A=({storage:i=new o,printer:e=console.table})=>{chrome.storage.onChanged.addListener((t,a)=>{console.log("Storage Changed:",t),a===i.area&&u({storage:i,printer:e})})};export{A as startChangeReporter,u as table};
